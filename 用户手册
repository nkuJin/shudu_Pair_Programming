### 用户手册

##### 使用说明

用户可以通过命令行运行程序启动数独程序

通过使用不同参数选择生成数独棋盘。

数独生成器有可以生成终局棋盘，也可以生成数独游戏。

```sh
-c：生成数独终局。示例命令行参数：sudoku.exe -c 20，表示生成20个数独终局。

-s：从文件中读取数独游戏并求解。示例命令行参数：sudoku.exe -s game.txt，表示从game.txt文件中读取数独游戏并求解。

-n：生成数独游戏。示例命令行参数：sudoku.exe -n 1000，表示生成1000个数独游戏。

-m：指定数独游戏的难度等级。示例命令行参数：sudoku.exe -n 1000 -m 1，表示生成游戏难度为简单的1000个数独游戏。

-r：指定生成的数独游戏的挖空数范围。示例命令行参数：sudoku.exe -n 20 -r 20~55，表示生成挖空数在20到55之间的20个数独游戏。

-u：指定生成的数独游戏的解唯一。示例命令行参数：sudoku.exe -n 20 -u，表示生成解唯一的20个数独游戏。
```
用户可以在sudoku.exe所在的文件夹下运行命令行控制程序输入sudoku.exe+相应的参数，若参数输入不正确则提示参数错误。


##### 参数说明

| 参数名称 | 参数含义                   | 参数使用范围 | 参数使用用例                                                | 
| -------- | -------------------------- | ------------ | ----------------------------------------------------------- | 
| -c       | 需要生成多少的终局棋盘     | 1-1000000    | shudu.exe -c 20                                          |
| -s       | 需要解的数独棋盘文件路径                   |绝对路径或相对路径              | shudu.exe -s Game.txt                                                | 单一参数即可                                       |
| -n       | 需要生成的带解密的棋盘数量 | 1-1000       | shudu.exe -n 1000          | 其中-m -r 和-u是可选参数，如果缺省则使用默认值 |
| - m      | 游戏难度                   | 1-3          | shudu.exe -n 100 -m 2                                       | 
| -r       | 挖空数量                   | 20~55        | shudu.exe -r 20~55                                          |
| -u       | 是否生成唯一解             |              |sudoku.exe -n 20 -u                                                             |




## Development

Want to contribute? Great!

Dillinger uses Gulp + Webpack for fast developing.
Make a change in your file and instantaneously see your updates!

Open your favorite Terminal and run these commands.

First Tab:

```sh
node app
```

Second Tab:

```sh
gulp watch
```

(optional) Third:

```sh
karma test
```

#### Building for source

For production release:

```sh
gulp build --prod
```

Generating pre-built zip archives for distribution:

```sh
gulp build dist --prod
```

## Docker

Dillinger is very easy to install and deploy in a Docker container.

By default, the Docker will expose port 8080, so change this within the
Dockerfile if necessary. When ready, simply use the Dockerfile to
build the image.

```sh
cd dillinger
docker build -t <youruser>/dillinger:${package.json.version} .
```

This will create the dillinger image and pull in the necessary dependencies.
Be sure to swap out `${package.json.version}` with the actual
version of Dillinger.

Once done, run the Docker image and map the port to whatever you wish on
your host. In this example, we simply map port 8000 of the host to
port 8080 of the Docker (or whatever port was exposed in the Dockerfile):

```sh
docker run -d -p 8000:8080 --restart=always --cap-add=SYS_ADMIN --name=dillinger <youruser>/dillinger:${package.json.version}
```

> Note: `--capt-add=SYS-ADMIN` is required for PDF rendering.

Verify the deployment by navigating to your server address in
your preferred browser.

```sh
127.0.0.1:8000
```

## License

MIT

**Free Software, Hell Yeah!**



